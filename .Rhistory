install.packages("KernSmooth")
install.packages("KernSmooth")
help()
library(KernSmooth)
q()
install.packages("devtools")
install.packages("ggplot2")
library(devtools)
find_rtools()
source("http://bioconductor.org/biocLite.R")
biocLite()
find_packages(slidify)
find.package("slidify")
install_packages("slidify")
install.packages("slidify")
library(devtools)
search()
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
install.packages("ggplot2")
q
exit
quit
getwd()
read.csv("mydata.csv")
setwd("~/Education/Coursera/R Programming/Assignment 1")
source("complete.R")
complete("specdata", 70:71)
complete("specdata", 1)
source("complete.R")
complete("specdata", 70:71)
source("complete.R")
complete("specdata", 1)
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", 70:72)
complete("specdata")
source("complete.R")
complete("specdata")
source("corr.R")
corr("specdata")
cr <- corr("specdata")
corr("specdata", 500)
corr("specdata", 10000)
cr <- corr("specdata", 10000)
cr
head(cr)
length(cr)
x = numeric()
x <- numeric()
x
x = numeric()
x
m <<- mena
m <<- mean
m <- mean
rm(m)
rm(x)
source("cachemean.R")
rm(complete)
rm(corr)
rm(cr)
makeVector(1:3)
makeVector(1)
x
x <- makeVector(1)
x$get()
x
x
x$get()
makeVector(1:3)
x$get()
x <- makeVector(1:3)
x$get()
x$getmean()
x$getmean
x$setmean()
rm(x)
x <- makeVector(1:2)
cachemean(x)
cachemean(x)
x <- makeVector(1)
cachemean(x)
cachemean(x)
cachemean(x, 1)
cachemean(x, 2
)
y <- makeVector(2)
cachemean(y)
cachemean(x)
cachemean(y)
cachemean(x, y)
cachemean(x, y, z, w)
z$getmean()
cachemean(z)
cachemean(w)
cachemean(x)
cachemean(y)
rm(x, y)
cachemean(1, 2)
setwd("C:/Users/Jeff/ProgrammingAssignment2/ProgrammingAssignment2")
rm(cachemean, makeVector)
x <- matrix(c(1,2), c(3, 4))
matrix(1:4, nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
solve(m)
source("cachematrix.R")
m <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
m
m$get()
m$set()
m$getinverse
m$getinverse()
cacheSolve(m)
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(0, 0, 0, 0), nrow = 2, ncol =2))
m
m$get()
m$get[[1]]
m$get[1]
m$get[1, 1]
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(1, 1, 1, 1), nrow = 2, ncol = 2))
cacheSolve(m)
x
cacheSolve(x)
rm(x)
m <- makeCacheMatrix(matrix(1, nrow = 1, ncol = 1)
)
m
m$get()
cacheSolve(m)
cacheSolve(m)
m <- makeCacheMatrix(2, nrow = 1, ncol = 1)
m <- makeCacheMatrix(matrix(2, nrow = 1, ncol = 1))
m$get()
cacheSolve(m)
cacheSolve(m)
m < makeCacheMatrix(matrix(1, nrow = 1, ncol = 1))
m <- makeCacheMatrix(matrix(1, nrow = 1, ncol = 1))
m$get()
cacheSolve(m)
m <- makeCacheMatrix(matrix(2, nrow = 1, ncol = 1))
cacheSolve(m)
m
m$get()
m$set()
m$set(matrix(1, nrow = 1, ncol = 1))
m$get()
cacheSolve(m)
source("cachematrix.R")
m$set(matrix(2, nrow = 1, ncol = 1))
cacheSolve(m)
cacheSolve(m)
n <- makeCacheMatrix(matrix(3, nrow = 1, ncol = 1))
cacheSolve(n)
cacheSolve(n)
n$set(matrix(1, nrow = 1, ncol = 1))
cacheSolve(n)
n$get()
n$get([[1]])
n$get([1])
n[1]$get()
n[1]
m == n
m <- matrix(1, nrow = 1, ncol = 1)
n <- matrix(1, nrow = 1, ncol = 1)
m == n
n <- matrix(2, nrow = 1, ncol = 1)
m == n
rm(m, n)
m <- makeCacheMatrix(matrix(1, nrow = 1, ncol = 1))
m
m$get()
m$get()[1, 1]
m$set()[1, 1] <- 2
m$set(m$get()[1,1]) <- 2
m
m$get()
m$getinverse()
m$getinverse()
cacheSolve(m)
cacheSolve(m)
m$set(matrix(2, nrow = 1, ncol = 1))
cacheSolve(m)
m$get()
source("cachematrix.R")
rm(m)
m <- makeCacheMatrix(matrix(1, nrow = 1, ncol = 1))
cacheSolve(m)
cacheSolve(m)
m$set(matrix(2, nrow = 1, ncol = 1))
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
rm(m)
source("cachematrix.R")
m <- makeCacheMatrix(matrix(1, nrow = 1, ncol = 1))
cacheSolve(m)
cacheSolve(m)
m$set(matrix(1, nrow = 1, ncol = 1))
cacheSolve(m)
m$set(matrix(2, nrow = 1, ncol = 1))
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
rm(m)
m <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve(m)
rm(m)
source("cacheMatrix.R)
)
""
)
")"
source("cachematrix.R")
m <- makeCacheMatrix(matrix(1, nrow = 1, ncol = 1))
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
m$set(matrix(2, nrow = 1, ncol = 1))
cacheSolve(m)
cacheSolve(m)
m$set(matrix(2, nrow = 1, ncol = 1))
cacheSolve(m)
m$get()
rm(m)
m <- makeCacheMatrix(matrix(1, nrow = 1, ncol = 1))
m$get()
m$getinverse()
m$getinverse()
cacheSolve(m)
cacheSolve(m)
